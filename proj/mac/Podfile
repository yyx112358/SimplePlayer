# Uncomment the next line to define a global platform for your project
platform :osx, '13.0'

USE_EXTERNAL_SPDLOG = 0


REPO_ROOT_PATH = File.expand_path('../../')
PROJECT_ROOT_PATH = File.expand_path('.')
THIRDPARTY_ROOT_PATH = REPO_ROOT_PATH + '/thirdParty'
THIRDPARTY_BUILD_PATH = REPO_ROOT_PATH + '/build'

puts REPO_ROOT_PATH
puts PROJECT_ROOT_PATH
puts THIRDPARTY_BUILD_PATH
puts THIRDPARTY_ROOT_PATH

target 'SimplePlayer' do
  # Comment the next line if you don't want to use dynamic frameworks
  # use_frameworks!

  pre_install do |installer|
    # spdlog
    # spdlog可以是header only导入，但如果提前编译，可以大大加快项目编译速度
    system('cmake', '-S', THIRDPARTY_ROOT_PATH + '/spdlog/', '-B', THIRDPARTY_BUILD_PATH + '/thirdParty/spdlog/')
    system('cmake', '--build', THIRDPARTY_BUILD_PATH + '/thirdParty/spdlog/')

    # FFMpeg
    if Dir.exist?(THIRDPARTY_BUILD_PATH + '/thirdParty/FFMpeg')
      puts THIRDPARTY_BUILD_PATH + '/thirdParty/FFMpeg' + '已存在'
    else
      puts THIRDPARTY_BUILD_PATH + '/thirdParty/FFMpeg' + '编译。。。'
      ENV['FF_SOURCE_DIR'] = THIRDPARTY_ROOT_PATH + '/FFMpeg'
      ENV['FF_BUILD_DIR'] = THIRDPARTY_BUILD_PATH + '/thirdParty/FFMpeg'
      
      system('sh', THIRDPARTY_ROOT_PATH + '/build_script/build_FFMpeg.sh')
    end

    # glm
    # glm是header only引入，无需编译
    # system('cmake', '-S', THIRDPARTY_ROOT_PATH + '/glm/', '-B', THIRDPARTY_BUILD_PATH + '/thirdParty/glm/')
    # system('cmake', '--build', THIRDPARTY_BUILD_PATH + '/thirdParty/glm/')

  end
  
  # if USE_EXTERNAL_SPDLOG
  #   pod 'spdlog'
  # else
  #   pod 'spdlog', :path => THIRDPARTY_ROOT_PATH + 'spdlog'
  # end

  pod 'SimplePlayer', :path => '../../', :subspec => ['Base', 'Ability', 'Engine', 'Interface','spdlog', 'FFMpeg', 'glm']


  
end
